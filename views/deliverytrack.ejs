<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Map</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100vh;
        }
        #map {
            width: 100%;
            height: 100%;
        }
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f7f7f7;
            margin: 0;
            padding: 0;
            transition: all 0.3s ease;
        }
        .leaflet-control-zoom, .leaflet-bar, .leaflet-control {
    display: none;
}

        
        /* Header Panel Styling */
        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #4CAF50;
            color: white;
            padding: 20px 40px; /* Height of the header */
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
        }

        .header .title {
            font-size: 44px;
            font-weight: bold;
            text-align: center;
            flex-grow: 1;
            font-family: 'Times New Roman', Times, serif;
        }

        .header .buttons {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        /* Profile Button on the left */
        .header .profile-btn, .header .order-btn {
            background-color: #fff;
            color: #4CAF50;
            padding: 10px 15px;
            font-size: 16px;
            border: 2px solid #4CAF50;
            border-radius: 25px; /* Rounded button */
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .header .profile-btn:hover, .header .order-btn:hover {
            background-color: #FF5722;
            color: white;
            border-color: #FF5722;
            transform: translateY(-5px);
        }

        .header .profile-btn i, .header .order-btn i {
            font-size: 18px;
        }

        /* Cart and Logout Buttons on the Right */
        .header .other-buttons {
            display: flex;
            gap: 15px;
        }

        .header button {
            background-color: #fff;
            color: #4CAF50;
            padding: 10px 20px;
            font-size: 16px;
            border: 2px solid #4CAF50;
            border-radius: 25px; /* Rounded button */
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .header button:hover {
            background-color: #FF5722;
            color: white;
            border-color: #FF5722;
            transform: translateY(-5px);
        }

        .header button i {
            font-size: 18px;
        }
        #distance-time {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
            border-radius: 20px;
            z-index: 9999;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #distance-time span {
            margin-right: 15px;
        }
        /* Hide any routing instructions or description */
        .leaflet-routing-container,
        .leaflet-routing-instructions {
            display: none;
        }
    </style>
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
</head>
<body>
    <div class="header">
        <div class="other-buttons">
        <!-- Profile Button to the left -->
        <button class="order-btn">
            <i class="fas fa-home"></i> Home
        </button>
    </div>
        <div class="title">E-Mart</div>
        <!-- Cart and Logout Buttons to the right -->
        <div class="other-buttons">
            
            <button class="logout-btn" >
                <i class="fas fa-sync"></i>
                Refresh
            </button>
        </div>
    </div>
    <div id="map"></div>
    <div id="distance-time">Distance: N/A | Time: N/A</div>
    <div id="userdata" data-user='<%= JSON.stringify(lastLocation) %>'></div>
    
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>

    <script>
        const user = JSON.parse(document.getElementById('userdata').getAttribute('data-user'));
        const socket = io();

        const bikeIcon = L.icon({
            iconUrl: '/images/3448289.png',  // Local path to the downloaded icon
            iconSize: [45, 45],  // Adjust the size
            iconAnchor: [16, 32], // Anchor the icon at the bottom center
            popupAnchor: [0, -32], // Position of the popup
        });

        // Function to update distance and time display
        function updateDistanceTime(distance, time) {
            document.getElementById('distance-time').textContent = `Distance: ${distance} | Time: ${time}`;
        }

        socket.on('receivedd-location', (data) => {
            const map = L.map('map').setView([data.latitude, data.longitude], 13);

            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Suhan'
            }).addTo(map);

            // Add markers
            L.marker([data.latitude, data.longitude], { icon: bikeIcon }).addTo(map);
            L.marker([user.latitude, user.longitude]).addTo(map);

            // Check if L.Routing is available
            if (L.Routing) {
                console.log("Leaflet Routing Machine is loaded!");

                // Add route between the two markers
                var routeControl = L.Routing.control({
                    waypoints: [
                        L.latLng(user.latitude, user.longitude),
                        L.latLng(data.latitude, data.longitude)
                    ],
                    routeWhileDragging: true,
                    lineOptions: {
                        styles: [{ color: 'blue', weight: 5, opacity: 0.7 }]
                    },
                    createMarker: function() { return null; }
                }).addTo(map);

                // Get route distance and time
                routeControl.on('routesfound', function (e) {
                    const distance = e.routes[0].summary.totalDistance / 1000; // Convert to km
                    const time = e.routes[0].summary.totalTime / 60; // Convert to minutes
                    updateDistanceTime(distance.toFixed(2) + " km", time.toFixed(2) + " min");
                    console.log("Route found:", e.routes);
                });

                routeControl.on('routingerror', function (e) {
                    console.error("Routing error:", e.error);
                });
            } else {
                console.error("Leaflet Routing Machine is not available!");
            }
        });

        // Back button functionality
        document.querySelector('.order-btn').addEventListener('click', function() {
            window.history.back();
        });

        // Refresh button functionality
        document.querySelector('.logout-btn').addEventListener('click', function() {
            window.location.reload();
        });
    </script>
</body>
</html>
